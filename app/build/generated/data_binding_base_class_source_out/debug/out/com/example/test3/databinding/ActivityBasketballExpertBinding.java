// Generated by view binder compiler. Do not edit!
package com.example.test3.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.test3.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBasketballExpertBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout burpees;

  @NonNull
  public final Button button;

  @NonNull
  public final Button buttonTwo;

  @NonNull
  public final CheckBox checkBox;

  @NonNull
  public final CheckBox checkBox2;

  @NonNull
  public final CheckBox checkBox3;

  @NonNull
  public final CheckBox checkBox4;

  @NonNull
  public final LinearLayout hollowbodyholds;

  @NonNull
  public final LinearLayout lsithold;

  @NonNull
  public final LinearLayout singlearmpushup;

  @NonNull
  public final Toolbar toolBar;

  private ActivityBasketballExpertBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout burpees, @NonNull Button button, @NonNull Button buttonTwo,
      @NonNull CheckBox checkBox, @NonNull CheckBox checkBox2, @NonNull CheckBox checkBox3,
      @NonNull CheckBox checkBox4, @NonNull LinearLayout hollowbodyholds,
      @NonNull LinearLayout lsithold, @NonNull LinearLayout singlearmpushup,
      @NonNull Toolbar toolBar) {
    this.rootView = rootView;
    this.burpees = burpees;
    this.button = button;
    this.buttonTwo = buttonTwo;
    this.checkBox = checkBox;
    this.checkBox2 = checkBox2;
    this.checkBox3 = checkBox3;
    this.checkBox4 = checkBox4;
    this.hollowbodyholds = hollowbodyholds;
    this.lsithold = lsithold;
    this.singlearmpushup = singlearmpushup;
    this.toolBar = toolBar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBasketballExpertBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBasketballExpertBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_basketball_expert, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBasketballExpertBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.burpees;
      LinearLayout burpees = ViewBindings.findChildViewById(rootView, id);
      if (burpees == null) {
        break missingId;
      }

      id = R.id.button;
      Button button = ViewBindings.findChildViewById(rootView, id);
      if (button == null) {
        break missingId;
      }

      id = R.id.buttonTwo;
      Button buttonTwo = ViewBindings.findChildViewById(rootView, id);
      if (buttonTwo == null) {
        break missingId;
      }

      id = R.id.checkBox;
      CheckBox checkBox = ViewBindings.findChildViewById(rootView, id);
      if (checkBox == null) {
        break missingId;
      }

      id = R.id.checkBox2;
      CheckBox checkBox2 = ViewBindings.findChildViewById(rootView, id);
      if (checkBox2 == null) {
        break missingId;
      }

      id = R.id.checkBox3;
      CheckBox checkBox3 = ViewBindings.findChildViewById(rootView, id);
      if (checkBox3 == null) {
        break missingId;
      }

      id = R.id.checkBox4;
      CheckBox checkBox4 = ViewBindings.findChildViewById(rootView, id);
      if (checkBox4 == null) {
        break missingId;
      }

      id = R.id.hollowbodyholds;
      LinearLayout hollowbodyholds = ViewBindings.findChildViewById(rootView, id);
      if (hollowbodyholds == null) {
        break missingId;
      }

      id = R.id.lsithold;
      LinearLayout lsithold = ViewBindings.findChildViewById(rootView, id);
      if (lsithold == null) {
        break missingId;
      }

      id = R.id.singlearmpushup;
      LinearLayout singlearmpushup = ViewBindings.findChildViewById(rootView, id);
      if (singlearmpushup == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      return new ActivityBasketballExpertBinding((LinearLayout) rootView, burpees, button,
          buttonTwo, checkBox, checkBox2, checkBox3, checkBox4, hollowbodyholds, lsithold,
          singlearmpushup, toolBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
