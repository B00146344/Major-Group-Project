// Generated by view binder compiler. Do not edit!
package com.example.test3.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.test3.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityGaelicBeginnerBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout burpees;

  @NonNull
  public final LinearLayout mountainclimbers;

  @NonNull
  public final LinearLayout squats;

  @NonNull
  public final Toolbar toolBar;

  @NonNull
  public final LinearLayout tricepdips;

  private ActivityGaelicBeginnerBinding(@NonNull LinearLayout rootView,
      @NonNull LinearLayout burpees, @NonNull LinearLayout mountainclimbers,
      @NonNull LinearLayout squats, @NonNull Toolbar toolBar, @NonNull LinearLayout tricepdips) {
    this.rootView = rootView;
    this.burpees = burpees;
    this.mountainclimbers = mountainclimbers;
    this.squats = squats;
    this.toolBar = toolBar;
    this.tricepdips = tricepdips;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityGaelicBeginnerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityGaelicBeginnerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_gaelic_beginner, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityGaelicBeginnerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.burpees;
      LinearLayout burpees = ViewBindings.findChildViewById(rootView, id);
      if (burpees == null) {
        break missingId;
      }

      id = R.id.mountainclimbers;
      LinearLayout mountainclimbers = ViewBindings.findChildViewById(rootView, id);
      if (mountainclimbers == null) {
        break missingId;
      }

      id = R.id.squats;
      LinearLayout squats = ViewBindings.findChildViewById(rootView, id);
      if (squats == null) {
        break missingId;
      }

      id = R.id.toolBar;
      Toolbar toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }

      id = R.id.tricepdips;
      LinearLayout tricepdips = ViewBindings.findChildViewById(rootView, id);
      if (tricepdips == null) {
        break missingId;
      }

      return new ActivityGaelicBeginnerBinding((LinearLayout) rootView, burpees, mountainclimbers,
          squats, toolBar, tricepdips);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
